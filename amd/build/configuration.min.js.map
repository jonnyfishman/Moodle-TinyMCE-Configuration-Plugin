{"version":3,"file":"configuration.min.js","sources":["../src/configuration.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny Media Manager configuration.\n *\n * @module      tiny_tiny_configurator/configuration\n * @copyright   2022, Stevani Andolo  <stevani@hotmail.com.au>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {component} from './common';\n\nexport const configure = async (instanceConfig) => {\n\n  let TOOLBAR = [...instanceConfig.toolbar];\n  let MENU = {...instanceConfig.menu};\n\n  // Use async to load in plugin variables\n  const settings = await (async () => {\n    const pluginName = `${component}/plugin:data`;\n\n    while (!instanceConfig[pluginName]) {\n      await new Promise(resolve => setTimeout(resolve, 1));\n    }\n\n    return instanceConfig[pluginName].params;\n  })();\n\n\n\n  //let QUICKBAR = instanceConfig.quickbars_selection_toolbar;\n  /*\n  quickbarToRemove.forEach(button => {\n    const escapedButton = button.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n    instanceConfig.quickbars_selection_toolbar = instanceConfig.quickbars_selection_toolbar.replace(\n      new RegExp(escapedButton, 'g'), ''\n    );\n  });\n  */\n\n  // Edit the toolbar\n  TOOLBAR.forEach(menu => {\n    // Find the object in settings that matches the current menu.name\n    const toolbarSettings = settings.toolbarSettings[menu.name];\n\n    // Remove toolbar buttons\n    if (toolbarSettings && toolbarSettings.remove) {\n\n      menu.items = menu.items.filter(item => !toolbarSettings.remove.includes(item));\n    }\n    // Add toolbar buttons\n    if (toolbarSettings && toolbarSettings.add) {\n      menu.items = menu.items.concat(toolbarSettings.add);\n    }\n  });\n\n  // Edit the menu\n  for (const [menuName, menu] of Object.entries(MENU)) {\n    const menuSettings = settings.menuSettings[menuName];\n\n    if (menuSettings && menuSettings.items) {\n      menu.items = menuSettings.items;\n    }\n  }\n\n  return {\n    menu: MENU,\n    toolbar: TOOLBAR\n  };\n\n};\n"],"names":["async","TOOLBAR","instanceConfig","toolbar","MENU","menu","settings","pluginName","component","Promise","resolve","setTimeout","params","forEach","toolbarSettings","name","remove","items","filter","item","includes","add","concat","menuName","Object","entries","menuSettings"],"mappings":"sMAyByBA,MAAAA,qBAEnBC,QAAU,IAAIC,eAAeC,SAC7BC,KAAO,IAAIF,eAAeG,YAGxBC,cAAiB,iBACfC,qBAAgBC,wCAEdN,eAAeK,mBACf,IAAIE,SAAQC,SAAWC,WAAWD,QAAS,YAG5CR,eAAeK,YAAYK,QAPb,GAuBvBX,QAAQY,SAAQR,aAERS,gBAAkBR,SAASQ,gBAAgBT,KAAKU,MAGlDD,iBAAmBA,gBAAgBE,SAErCX,KAAKY,MAAQZ,KAAKY,MAAMC,QAAOC,OAASL,gBAAgBE,OAAOI,SAASD,SAGtEL,iBAAmBA,gBAAgBO,MACrChB,KAAKY,MAAQZ,KAAKY,MAAMK,OAAOR,gBAAgBO,aAK9C,MAAOE,SAAUlB,QAASmB,OAAOC,QAAQrB,MAAO,OAC7CsB,aAAepB,SAASoB,aAAaH,UAEvCG,cAAgBA,aAAaT,QAC/BZ,KAAKY,MAAQS,aAAaT,aAIvB,CACLZ,KAAMD,KACND,QAASF"}